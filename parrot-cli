#!/bin/bash

export ID=90
export DOCKER_IMAGE=mcapitanio/parrot

function usage {
    echo -e "#################################################################################################################################################"
    echo -e "  Usage:"
    echo -e "             ./parrot-cli COMMAND [OPTIONS]"
    echo -e ""
    echo -e "  Commands:"
    echo -e "     start				Starts Parrot"
    echo -e "     start-kafka		Starts Apache Kafka"
    echo -e "     start-debezium	Starts Debezium"
    echo -e "     restart           Restarts Parrot"
    echo -e "     stop				Stops Parrot"
    echo -e "     stop-kafka        Stops Apache Kafka"
    echo -e "     stop-debezium     Stops Debezium"
    echo -e "     stop-all          Stops Apache Kafka, Debeziume and Parrot""
    echo -e "     deploy            Deploy Parrot"
    echo -e "     test              Runs Parrot Integration Tests"
    echo -e "     build             Builds Parrot"
    echo -e ""
    echo -e "  Options:"
    echo -e "     -d, --detach		Executes command in background"
    echo -e "         --debug       Starts Parrot in Debug Mode"
    echo -e "     -m, --mode        One of:"
    echo -e "                          LOCAL_UNIT"
    echo -e "                                Default: starts Parrot with the configuration for Local Unit Test with Properties.properties.local-ut file."
    echo -e "                          PIPELINE_UNIT"
    echo -e "                                Starts Parrot with the configuration for Trevis Pipeline Unit Test with Properties.properties.pipeline-ut file."
    echo -e ""    
    echo -e " Exposed Ports:
    echo -e ""
    echo -e "                         8090  ->  JBoss Http"
    echo -e "                         9990  ->  JBoss Management"
    echo -e "                         8790  ->  JBoss Debug"
    echo -e "                         5432  ->  PostgreSQL"
    echo -e "                         3306  ->  MySQL"
    echo -e "                         1521  ->  Oracle Database"
    echo -e "                         5500  ->  Oracle Enterprise Manager"
    echo -e "                         27017 ->  MongoDB"
    echo -e "#################################################################################################################################################"
}

function print_env {
    echo -e "#################################################################################################################################################"
    echo -e "  Executing with:                                                                                                                                "
    echo -e "             Command              -> $COMMAND"
    echo -e "             Debug                -> $DEBUG"
    echo -e "             ID                   -> $ID"
    echo -e "             Mode                 -> $MODE"
    echo -e "			  Volume Root Path     -> $VOLUME_ROOT_PATH"
    echo -e "#################################################################################################################################################"
}

export DEBUG="false"
export STOP="false"
export MODE="LOCAL_UNIT"
export LOCAL_UNIT="false"
export LOCAL_INTEGRATION="false"
export PIPELINE_UNIT="false"
export PIPELINE_INTEGRATION="false"
export PRODUCTION="false"
export HOSTNAME=localhost
export DOCKER_COMPOSE_FILE="docker-compose.yml"

export SERVICE="parrot"

for i in "$@"
do
case $i in
	start)
	COMMAND="start"
	shift
    ;;
	stop)
	COMMAND="stop"
	shift
    ;;
    stop-kafka)
	COMMAND="stop-kafka"
	shift
    ;;
    start-kafka)
	COMMAND="start-kafka"
	shift
    ;;
    stop-debezium)
    COMMAND="stop-debezium"
	shift
    ;;
    start-debezium)
	COMMAND="start-debezium"
	shift
    ;;
    stop-all)
	COMMAND="stop-all"
	shift
    ;;
    restart)
    COMMAND="restart"
    shift
    ;;
    test)
    COMMAND="test"
    shift
    ;;
    build)
    COMMAND="build"
    shift
    ;;
    deploy)
    COMMAND="deploy"
    shift
    ;;
    -m*|--mode*)
    set -- "$i" 
    IFS="="; declare -a Array=($*)
    MODE=${Array[1]}
    shift
    ;;
    --debug*)
    export DEBUG="true"
    shift
    ;;
    -d*|--detach*)
    export DETACH="-d"
    shift
    ;;
    -stop*)
    STOP="true"
    shift
    ;;
    *)
      if [ "$1" = "--help" ]; then
        usage
        print_env
      else
        usage
      fi
      exit 0
    ;;
esac
done

if [[ (-z "$DOCKER_TAG") ]]; then
    export DOCKER_TAG=local
fi

if [[ (-z "$COMMAND") ]]; then
    usage
    print_env
    exit 0
fi

if [[ ($MODE = "LOCAL_UNIT") ]]; then
    export LOCAL_UNIT="true"
fi

if [[ ($MODE = "PIPELINE_UNIT") ]]; then
    export PIPELINE_UNIT="true"
    export DOCKER_COMPOSE_FILE="docker-compose-pipeline.yml"
    HOSTNAME=docker
fi

if [[ ($MODE = "PRODUCTION") ]]; then
    export PRODUCTION="true"
fi

if [[ ($COMMAND = "restart") || ($COMMAND = "stop") ]]; then
	docker-compose -f docker/$DOCKER_COMPOSE_FILE down -v
fi

if [[ ($COMMAND = "stop-kafka") ]]; then
	docker-compose -f docker/kafka.yml down -v
fi

if [[ ($COMMAND = "start-kafka") ]]; then
	docker-compose -f docker/kafka.yml up $DETACH
fi

if [[ ($COMMAND = "stop-debezium") ]]; then
	docker-compose -f docker/debezium.yml down -v
fi

if [[ ($COMMAND = "start-debezium") ]]; then
	docker-compose -f docker/debezium.yml up $DETACH
fi

if [[ ($COMMAND = "stop-all") ]]; then
	docker-compose -f docker/debezium.yml down -v
	docker-compose -f docker/kafka.yml down -v
	docker-compose -f docker/$DOCKER_COMPOSE_FILE down -v
fi

if [[ ($COMMAND = "stop") || ($COMMAND = "stop-kafka") || ($COMMAND = "start-kafka") || ($COMMAND = "start-debezium") || ($COMMAND = "stop-debezium") || ($COMMAND = "stop-all") ]]; then
	exit 0
fi

mvn clean package -DskipTests

if [ $? -ne 0 ]; then
	exit 1
fi

if [[ ($COMMAND = "test") ]]; then
	mvn clean verify -PskipDeploy -DPIPELINE_UNIT=$PIPELINE_UNIT -DPIPELINE_INTEGRATION=$PIPELINE_INTEGRATION -DLOCAL_UNIT=$LOCAL_UNIT -DLOCAL_INTEGRATION=$LOCAL_INTEGRATION -Dwildfly.hostname=$HOSTNAME -Dwildfly.port=99$ID -Dpostgresql.hostname=$HOSTNAME -Dpostgresql.port=54$ID -U
	if [ $? -ne 0 ]; then
        exit 1
    fi
fi
if [[ ($COMMAND = "deploy") ]]; then
	mvn clean verify -DskipTests -DPIPELINE_UNIT=$PIPELINE_UNIT -DPIPELINE_INTEGRATION=$PIPELINE_INTEGRATION -DLOCAL_UNIT=$LOCAL_UNIT -DLOCAL_INTEGRATION=$LOCAL_INTEGRATION -Dwildfly.hostname=$HOSTNAME -Dwildfly.port=99$ID -Dpostgresql.hostname=$HOSTNAME -Dpostgresql.port=54$ID -U
	if [ $? -ne 0 ]; then
        exit 1
    fi
fi

if [[ ($COMMAND = "build") ]]; then
	docker-compose -f docker/docker-compose.yml build
	if [[ ($DOCKER_TAG -ne "local") ]]; then
		docker-compose -f ./docker/$DOCKER_COMPOSE_FILE push
	fi
	exit 0
fi

if [[ ($COMMAND = "start") || ($COMMAND = "restart") ]]; then
	docker rmi $(docker images | grep "^<none>" | awk "{print $3}") 2> /dev/null
	docker-compose -f docker/$DOCKER_COMPOSE_FILE build	
    docker-compose -f docker/kafka.yml up -d
    docker-compose -f docker/debezium.yml up -d
    docker-compose -f docker/$DOCKER_COMPOSE_FILE up -d $SERVICE
    docker/wait-for-it.sh $HOSTNAME:99$ID -t 120

	docker exec -it docker_${SERVICE}_1 bash /opt/parrot/docker/wildfly/deploy.sh

	if [[ ($MODE = "LOCAL_UNIT") || ($MODE = "LOCAL_INTEGRATION") ]]; then
		docker-compose -f docker/$DOCKER_COMPOSE_FILE logs -f
    fi
fi