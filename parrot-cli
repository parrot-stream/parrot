#!/bin/bash

export ID=90
export DOCKER_IMAGE=mcapitanio/parrot

function usage {
    echo -e "#################################################################################################################################################"
    echo -e "  Utilizzo:                                                                                                                                      "
    echo -e "             ./parrot-cli start|start-kafka|stop|stop-kafka|start-debezium|stop-debezium|stop-all|restart|deploy|test|build [-d|--debug] [-m=<TYPE>|--mode=<TYPE>]"
    echo -e "  Esempi:"
    echo -e "             ./parrot-cli start -d"
    echo -e "                                                                                                                                                 "
    echo -e "                 -> Effettua lo start del servizio con rebuild dell'immagine e avvia JBoss in Standalone Mode (Debug)"
    echo -e ""
    echo -e "             ./parrot-cli start -m=LOCAL_INTEGRATION"
    echo -e ""
    echo -e "                 -> Effettua lo start del servizio in modalita' di test integrazione locali"
    echo -e ""
    echo -e "                    Le modalita' previste sono:"
    echo -e "                         LOCAL_UNIT           -> Test unitari locali (avvio per l'eesecuzione dei test unitari locali)"
    echo -e "                         LOCAL_INTEGRATION    -> Test integrazione locali  (avvio per l'esecuzione dei test di integrazione locali)"
    echo -e "                         PIPELINE_UNIT        -> Test unitari in GitLab Pipeline (avvio per l'esecizione dei test unitari da GitLab pipeline)"
    echo -e "                         PIPELINE_INTEGRATION -> Test integrazione in GitLab Pipeline (avvio per l'esecuzione dei test di integrazione da GitLab pipeline)"
    echo -e "                         DEVELOPMENT          -> Development Mode (avvio per utilizzo in fase di sviluppo)"
    echo -e "                         PRODUCTION           -> Production mode"
    echo -e ""
    echo -e "             ./parrot-cli stop"
    echo -e "                                                                                                                                                 "
    echo -e "                 -> Effettua lo stop del servizio e del relativo database, del database degli eventi e di Kafka"
    echo -e ""    
    echo -e "                    Le porte esposte sono determinate in base all'ID fornito, quindi:"
    echo -e "                         54$ID  ->  PostgreSQL port"
    echo -e "                         80$ID  ->  JBoss Http"
    echo -e "                         99$ID  ->  JBoss Management"
    echo -e "                         87$ID  ->  JBoss Debug"
    echo -e "#################################################################################################################################################"
}

function print_env {
    echo -e "#################################################################################################################################################"
    echo -e "  Esecuzione con:                                                                                                                                "
    echo -e "             command              -> $COMMAND"
    echo -e "             debug                -> $DEBUG"
    echo -e "             id                   -> $ID"
    echo -e "             mode                 -> $MODE"
    echo -e "#################################################################################################################################################"
}

export DEBUG="false"
export STOP="false"
export MODE="LOCAL_UNIT"
export LOCAL_UNIT="false"
export LOCAL_INTEGRATION="false"
export PIPELINE_UNIT="false"
export PIPELINE_INTEGRATION="false"
export DEVELOPMENT="false"
export PRODUCTION="false"
export HOSTNAME=localhost
export DOCKER_COMPOSE_FILE="docker-compose.yml"

export SERVICE="parrot"

for i in "$@"
do
case $i in
	start)
	COMMAND="start"
	shift
    ;;
	stop)
	COMMAND="stop"
	shift
    ;;
    stop-kafka)
	COMMAND="stop-kafka"
	shift
    ;;
    start-kafka)
	COMMAND="start-kafka"
	shift
    ;;
    stop-debezium)
    COMMAND="stop-debezium"
	shift
    ;;
    start-debezium)
	COMMAND="start-debezium"
	shift
    ;;
    stop-all)
	COMMAND="stop-all"
	shift
    ;;
    restart)
    COMMAND="restart"
    shift
    ;;
    test)
    COMMAND="test"
    shift
    ;;
    build)
    COMMAND="build"
    shift
    ;;
    deploy)
    COMMAND="deploy"
    shift
    ;;
    -m*|--mode*)
    set -- "$i" 
    IFS="="; declare -a Array=($*)
    MODE=${Array[1]}
    shift
    ;;
    -d*|--debug*)
    export DEBUG="true"
    shift
    ;;
    -stop*)
    STOP="true"
    shift
    ;;
    *)
      if [ "$1" = "--help" ]; then
        usage
        print_env
      else
        usage
      fi
      exit 0
    ;;
esac
done

if [[ (-z "$DOCKER_TAG") ]]; then
    export DOCKER_TAG=local
fi

if [[ (-z "$COMMAND") ]]; then
    usage
    print_env
    exit 0
fi

if [[ ($MODE = "LOCAL_UNIT") ]]; then
    export LOCAL_UNIT="true"
fi
if [[ ($MODE = "LOCAL_INTEGRATION") ]]; then
    export LOCAL_INTEGRATION="true"
fi
if [[ ($MODE = "PIPELINE_UNIT") ]]; then
    export PIPELINE_UNIT="true"
    export DOCKER_COMPOSE_FILE="docker-compose-pipeline.yml"
    HOSTNAME=docker
fi
if [[ ($MODE = "PIPELINE_INTEGRATION") ]]; then
    export PIPELINE_INTEGRATION="true"
    export DOCKER_COMPOSE_FILE="docker-compose-pipeline.yml"
    HOSTNAME=docker
fi
if [[ ($MODE = "DEVELOPMENT") ]]; then
    export DEVELOPMENT="true"
fi
if [[ ($MODE = "PRODUCTION") ]]; then
    export PRODUCTION="true"
fi

if [[ ($COMMAND = "restart") || ($COMMAND = "stop") ]]; then
	docker-compose -f docker/$DOCKER_COMPOSE_FILE down -v
fi

if [[ ($COMMAND = "stop-kafka") ]]; then
	docker-compose -f docker/kafka.yml down -v
fi

if [[ ($COMMAND = "start-kafka") ]]; then
	docker-compose -f docker/kafka.yml up -d
fi

if [[ ($COMMAND = "stop-debezium") ]]; then
	docker-compose -f docker/debezium.yml down -v
fi

if [[ ($COMMAND = "start-debezium") ]]; then
	docker-compose -f docker/debezium.yml up
fi

if [[ ($COMMAND = "stop-all") ]]; then
	docker-compose -f docker/debezium.yml down -v
	docker-compose -f docker/kafka.yml down -v
	docker-compose -f docker/$DOCKER_COMPOSE_FILE down -v
fi

if [[ ($COMMAND = "stop") || ($COMMAND = "stop-kafka") || ($COMMAND = "start-kafka") || ($COMMAND = "start-debezium") || ($COMMAND = "stop-debezium") || ($COMMAND = "stop-all") ]]; then
	exit 0
fi

mvn clean package -DskipTests -U

if [ $? -ne 0 ]; then
	exit 1
fi

if [[ ($COMMAND = "test") ]]; then
	mvn clean verify -PskipDeploy -DPIPELINE_UNIT=$PIPELINE_UNIT -DPIPELINE_INTEGRATION=$PIPELINE_INTEGRATION -DLOCAL_UNIT=$LOCAL_UNIT -DLOCAL_INTEGRATION=$LOCAL_INTEGRATION -Dwildfly.hostname=$HOSTNAME -Dwildfly.port=99$ID -Dpostgresql.hostname=$HOSTNAME -Dpostgresql.port=54$ID -U
	if [ $? -ne 0 ]; then
        exit 1
    fi
fi
if [[ ($COMMAND = "deploy") ]]; then
	mvn clean verify -DskipTests -DPIPELINE_UNIT=$PIPELINE_UNIT -DPIPELINE_INTEGRATION=$PIPELINE_INTEGRATION -DLOCAL_UNIT=$LOCAL_UNIT -DLOCAL_INTEGRATION=$LOCAL_INTEGRATION -Dwildfly.hostname=$HOSTNAME -Dwildfly.port=99$ID -Dpostgresql.hostname=$HOSTNAME -Dpostgresql.port=54$ID -U
	if [ $? -ne 0 ]; then
        exit 1
    fi
fi

if [[ ($COMMAND = "build") ]]; then
	docker-compose -f docker/docker-compose.yml build
	if [[ ($DOCKER_TAG -ne "local") ]]; then
		docker-compose -f ./docker/$DOCKER_COMPOSE_FILE push
	fi
	exit 0
fi

if [[ ($COMMAND = "start") || ($COMMAND = "restart") ]]; then
	docker rmi $(docker images | grep "^<none>" | awk "{print $3}") 2> /dev/null
	docker-compose -f docker/$DOCKER_COMPOSE_FILE build	
    docker-compose -f docker/kafka.yml up -d
    docker-compose -f docker/debezium.yml up -d
    docker-compose -f docker/$DOCKER_COMPOSE_FILE up -d $SERVICE
    docker/wait-for-it.sh $HOSTNAME:99$ID -t 120

	docker exec -it docker_${SERVICE}_1 bash /opt/parrot/docker/wildfly/deploy.sh

	if [[ ($MODE = "LOCAL_UNIT") || ($MODE = "LOCAL_INTEGRATION") || ($MODE = "DEVELOPMENT") ]]; then
		docker-compose -f docker/$DOCKER_COMPOSE_FILE logs -f
    fi
fi